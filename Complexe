using namespace std;
#include <cmath>
#include <iostream>
class complexe {
private:
    double Re;
    double Img;
public:
    complexe() { // constructeur par defaut
        this->Img = 0.0;
        this->Re = 0.0;
    }
    complexe(double Re, double Img) // constructeur avec parametre
    {
            this->Img = Img;
            this->Re = Re;
    }
    //complexe(complexe const& autre) :Img(autre.Img), Re(autre.Re); {}
    
    void affichage()const;
        double module()const;
        complexe conjuge()const;
        complexe operator+(const complexe& autre);
        complexe operator+(const double);
        complexe operator*(const complexe& autre);
};
void complexe::affichage()const{
    if (this->Img > 0)
    {
        cout<< this->Re << "+i" << this->Img<<"\n";
    }
    else
        cout<< this->Re << "-i" << -this->Img << "\n";
}
 
double complexe::module()const {
    double squareroot;
    squareroot= sqrt(pow(this->Re, 2) + pow(this->Img, 2));
    return squareroot;
}
complexe complexe::conjuge()const {
    complexe nombre;
    nombre.Re = this->Re;
    nombre.Img = -this->Img;
    return  nombre;
}
complexe complexe::operator+(const complexe& autre){
    complexe somme;
    somme.Re = this->Re + autre.Re;
    somme.Img = this->Img + autre.Img;
    return somme;
}
complexe complexe::operator+(const double n_double) {
    complexe somme;
    somme.Re = this->Re + n_double;
    somme.Img = this->Img;
    return somme;
}
complexe complexe::operator*(const complexe& autre) {
    complexe produit;
    produit.Re = this->Re * autre.Re - this->Img * autre.Img;
    produit.Img= this->Re * autre.Re + this->Img * autre.Img;
    return produit;
}


int main()
{
    complexe z2(7,-8);
    complexe z1(4,5);
    complexe z3;
    complexe z4,z5;
    cout << "le module : " <<z1.module() << "\n";
    z1.affichage();
    z2.affichage();
}
