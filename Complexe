
#include <cmath>
using namespace std;
class complexe {
private:
    double Re;
    double Img;
public:
    complexe() { // constructeur par defaut
        this->Imp = 0.0;
        this->Re = 0.0;
    }
    complexe(double Re, double Img) // constructeur avec parametre
    {
            this->Img = Img;
            this->Re = Re;
    }
    complexe(complexe const& autre)  :Img(autre.Img), Re(autre.Re); {}
    
    void affichage()const {}
    double module()const {}
    complexe conjuge()const {}
    complexe operator+(const complexe &autre){}
    complexe operator+(const double ){ }
    complexe operator*(const complexe &autre){}
};
void complexe::affichage()const {
    if (this->img > 0)
    {
        cout << this->Re << "+i" << this->Img;
    }
    else
        cout << this->Re << "-i" << -this->Img;
}
 
double complexe::module()const {
    return sqrt(pow(this->Re, 2) + pow(this->Img, 2));
}
complexe complexe::conjuge() {
    complexe nombre;
    nombre.Re = this->Re;
    nombre.Img = -this->Img;
    return  nombre;
}
complexe complexe::operator+(const complexe& autre) {
    complexe somme;
    somme.Re = this->Re + autre.Re;
    somme.Img = this->Img + autre.Img;
    return somme;
}
complexe complexe::operator+(const double n_double) {
    complexe somme;
    somme.Re = this->Re + n_double;
    somme.Img = this->Img;
    return somme;
}
complexe complexe::operator*(const complexe& autre) {
    complexe produit;
    produit.Re = this->Re * autre.Re - this->Img * autre.Img;
    produit.Img= this->Re * autre.Re + this->Img * autre.Img;
    return produit;
}
